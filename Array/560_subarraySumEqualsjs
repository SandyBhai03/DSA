// Q.=> Subarray Sum Equals to K (Leetcode Problem no-560) -----

//      ~~~~~~~ Optimized Approach O(n) ~~~~~~~~~

function checkSubarraySum(nums, k){
    const len = nums.length;
    let prefixSum = 0;
    let count  = 0;
    let map = new Map();
    map.set(0, 1); //  Initialize with sum 0 to handle subarrays starting from index 0

    for(let i = 0; i < len; i++){
        prefixSum += nums[i];

        if(map.has(prefixSum - k)){
            count += map.get(prefixSum - k);
        }

        map.set(prefixSum, (map.get(prefixSum) || 0) + 1);
    }
    return count; 
}
const nums = [1, 2, 3]
const k = 3;
console.log(checkSubarraySum(nums, k));


//       ~~~~~~~ Brute Froce Approach O(n) ~~~~~~~
// function checkSubarraySum(nums, k){
//     let len = nums.length;
//     let count = 0;

//     for(let i = 0; i < len; i++){ // O(n2)
//         let sum = 0;
//         for(let j = i; j < len; j++){
//             sum += nums[j];
//             if(sum === k){
//                 count++;
//             }
//         }
//     }
//     return count;
// }

// const nums = [1, 2, 3];
// const k = 3;
// console.log(checkSubarraySum(nums, k));